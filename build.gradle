buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.modrinth.minotaur:Minotaur:2.4.3'
		classpath "com.github.breadmoirai:github-release:2.4.1"
	}
}

plugins {
	id 'maven-publish'
	alias libs.plugins.loom
}

if (System.getenv("MODRINTH_TOKEN")) {
	apply plugin: "com.modrinth.minotaur"
}
if (System.getenv("GITHUB_TOKEN")) {
	apply plugin: "com.github.breadmoirai.github-release"
}

archivesBaseName = project.archives_base_name

def mc_major = '1.19'
def mc = mc_major + '.2'
def default_branch = '1.19'

def origVersion = project.version
project.version = project.version + "+" + mc_major
group = project.maven_group

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/" }
	maven { url "https://jitpack.io" }
	maven { url "https://api.modrinth.com/maven" }
	maven { url 'https://repo.sleeping.town' }
	maven { url 'https://maven.blamejared.com' }
	maven { url "https://maven.jamieswhiteshirt.com/libs-release" }
	maven { url 'https://ladysnake.jfrog.io/artifactory/mods' }
	maven { url 'https://maven.cafeteria.dev' }
	// Create
	maven { url "https://dvs1.progwml6.com/files/maven/" }
	maven { url "https://maven.parchmentmc.org" }
	maven { url "https://maven.quiltmc.org/repository/release" }
	maven { url "https://mvn.devos.one/snapshots/" }
	maven { url "https://cursemaven.com" }
	maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
	maven { url "https://maven.tterrag.com/" }
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	// // Base // //
	minecraft libs.mc
	mappings variantOf(libs.qm) { classifier "intermediary-v2" }
	modImplementation libs.ql
	modImplementation libs.qsl
	modImplementation libs.qfapi

	// // Libraries // //
	modCompileOnly libs.emi
	modLocalRuntime libs.emi

	// // Compat Dependencies // //
	modCompileOnly libs.lib39aqi
	modCompileOnly libs.lib39core
	modCompileOnly libs.lib39crowbar
	modCompileOnly libs.lib39deferral
	modCompileOnly libs.lib39dessicant
	modCompileOnly libs.lib39fractal
	modCompileOnly libs.lib39gesundheit
	modCompileOnly libs.lib39keygen
	modCompileOnly libs.lib39lockpick
	modCompileOnly libs.lib39machination
	modCompileOnly libs.lib39mesh
	modCompileOnly libs.lib39phantom
	modCompileOnly libs.lib39recoil
	modCompileOnly libs.lib39ripple
	modCompileOnly libs.lib39sandman
	modCompileOnly libs.lib39tunnel
	modCompileOnly libs.lib39util
	modCompileOnly libs.lib39waypoint
	modCompileOnly libs.lib39weld

	modCompileOnly libs.forgeConfigApiPort

	// // Compat // //
	modCompileOnly libs.farmersDelight
	modCompileOnly libs.campanion
	modCompileOnly libs.halfdoors
	modCompileOnly libs.chalk
	modCompileOnly libs.consistencyPlus
	modCompileOnly libs.yttr
	modCompileOnly libs.botania
	modCompileOnly libs.create
}

processResources {
	final Map<String, String> map = [
		"version"        : version.toString(),
		"mc"             : libs.versions.mc.get(),
		"ql"             : libs.versions.ql.get(),
		"qsl"            : libs.versions.qsl.get(),
		"qfapi"          : libs.versions.qfapi.get(),
		"emi"            : libs.versions.emi.get(),
		"farmersDelight" : libs.versions.farmersDelight.get(),
		"campanion"      : libs.versions.campanion.get(),
		"yttr"           : libs.versions.yttr.get(),
		"create"         : libs.versions.create.get(),
		"botania"        : libs.versions.botania.get(),
		"chalk"          : libs.versions.chalk.get(),
		"consistencyPlus": libs.versions.consistencyPlus.get(),
		"halfdoors"      : libs.versions.halfdoors.get(),
	]

	inputs.properties(map)
	filesMatching('quilt.mod.json') { expand(map) }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

jar {
	from("LICENSE.txt") {
		rename { "${it}_${archivesBaseName}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {

	}
}

if (System.getenv("MODRINTH_TOKEN")) {
	modrinth {
		token = System.getenv("MODRINTH_TOKEN")
		projectId = 'tinkerers-smithing'
		versionNumber = project.version
		versionName = origVersion
		versionType = 'release'
		uploadFile = remapJar
		gameVersions = [mc]
		loaders = ['quilt']
		detectLoaders = false
		dependencies {
			required.project "qsl"
			optional.project "emi"
			optional.project "yttr"
		}
		changelog = "Changelog: https://github.com/sisby-folk/tinkerers-smithing/releases/tag/v" + origVersion
		syncBodyFrom = rootProject.file("README.md").text
	}
}

if (System.getenv("GITHUB_TOKEN")) {
	githubRelease {
		token System.getenv("GITHUB_TOKEN")
		owner "sisby-folk"
		repo "tinkerers-smithing"
		tagName 'v' + origVersion
		releaseName origVersion
		targetCommitish default_branch
		draft false
		prerelease false
		releaseAssets remapJar.archiveFile
		allowUploadToExisting true
		generateReleaseNotes true
	}
	tasks.githubRelease.dependsOn remapJar
}
